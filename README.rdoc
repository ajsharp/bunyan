= Bunyan
Bunyan is a thin wrapper around a MongoDB capped collection.

= Install
gem install bunyan

= Configure
The only configuration options required are the database and collection name.

For rails apps, puts the config block in an initializer.

# config/intiializers/bunyan.rb

Bunyan::Logger.configure do |config|
  # required options
  config.database   'bunyan_logger'
  config.collection 'development_log'

  # optional
  config.disabled true
end

= Usage
You can access the bunyan logger anywhere is your app via Bunyan::Logger.
The Logger class is implemented as a singleton, and you can call any instance
method on the Logger class. This is implemented with some method_missing magic,
which is explained in a bit more detail below.

= Internals
Bunyan makes heavy usage of method_missing both at the class and instance level.
At the class level, this is purely for convenience to pass missing class methods
to the singleton instance, which precludes us from needing to use Logger.instance
directly. At the instance level, method_missing is used to provide a very thin
layer around MongoDB, via the Mongo driver.

The net effect of this is that there is no reason to muck around with 
calling methods directly on Bunyan::Logger.instance, because all methods that 
don't already exist at the class level will be sent to Bunyan::Logger.instance.

# Bunyan::Logger.count == Bunyan::Logger.instance.count

You can call any instance methods on it that you would otherwise call on
a Mongo collection.

= TODO
* Ability to limit bunyan to only run in certain environments
